import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'dev.architectury.loom' version '1.3-SNAPSHOT'

    // Vineflower is a fork of the FernFlower decompiler which contains many enhancements and bug fixes, and generally
    // produces much better source code. The Minecraft sources can be decompiled using it with the
    // "genSourcesWithVineflower" task.
    // (Note: Quiltflower was renamed to Vineflower in early July 2023.)
    id 'io.github.juuxel.loom-vineflower' version '1.11.0'

    // This dependency is only used to determine the state of the Git working tree so that build artifacts can be
    // more easily identified. TODO: Lazily load GrGit via a service only when builds are performed.
    id 'org.ajoberstar.grgit' version '5.0.0'

	id "me.modmuss50.mod-publish-plugin" version "0.3.4"
}

archivesBaseName = project.archives_base_name
version = "${project.mod_version}${getVersionMetadata()}+mc${project.minecraft_version}"
group = project.maven_group

apply from: "${rootProject.projectDir}/gradle/forge.gradle"
apply from: "${rootProject.projectDir}/gradle/java.gradle"

loom {
    mixin.defaultRefmapName = "mixins.rubidium.refmap.json"
    forge {
        mixinConfigs = [
                "rubidium.mixins.json"
        ]
    }
}

configurations {
    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }

    legacy {
        java {
            compileClasspath += main.compileClasspath
            compileClasspath += main.output
        }
    }
}

loom {
    runs {
        client {
            mods {
                embeddium {
                    sourceSet sourceSets.main
                    sourceSet sourceSets.api
                }
            }
        }
    }
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set "api-dev"

    from sourceSets.api.output
}

tasks.register('remapApiJar', RemapJarTask) {
    dependsOn apiJar
    archiveClassifier.set "api"

    input = apiJar.archiveFile.get().asFile
    addNestedDependencies = false
}

build.dependsOn apiJar
build.dependsOn remapApiJar

jar {
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
    from sourceSets.legacy.output.classesDirs
    from sourceSets.legacy.output.resourcesDir
}

def extraModsDir = "extra-mods-${project.minecraft_version}"

repositories {
    exclusiveContent {
        forRepository {
            flatDir {
                name "extra-mods"
                dir file(extraModsDir)
            }
        }
        filter {
            includeGroup "extra-mods"
        }
    }
    maven {
        // curseforge
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Forge API
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mods
    modCompileOnly "curse.maven:codechickenlib-242818:${codechicken_fileid}"


    // runtime remapping at home
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        modRuntimeOnly("extra-mods:$artifactId:$version")
    }
}

def copyJarNameConsistent = tasks.register('copyJarNameConsistent', Copy) {
    from remapJar // shortcut for createJar.outputs.files
    into project.file("build/libs")
    rename { name -> "embeddium-latest.jar" }
}

def copyJarToBin = tasks.register('copyJarToBin', Copy) {
    from remapJar // shortcut for createJar.outputs.files
    into rootProject.file("bin")
    mustRunAfter "copyJarNameConsistent"
}

tasks.named("remapApiJar") {
    mustRunAfter "copyJarNameConsistent"
}

tasks.build.dependsOn(copyJarToBin, copyJarNameConsistent)

publishMods {
	file = remapJar.archiveFile
	changelog = "https://github.com/embeddedt/embeddium/wiki/Changelog"
	type = STABLE
	modLoaders.add("forge")

	curseforge {
		projectId = "908741"
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}
	modrinth {
		projectId = "sk9rgfiA"
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}

	displayName = "[${project.minecraft_version}] Embeddium ${project.mod_version}"
}

def getVersionMetadata() {
	// CI builds only
	if (project.hasProperty("build.release")) {
		return "" // no tag whatsoever
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += ".dirty"
		}

		return "-git.${id}"
	}

	// No tracking information could be found about the build
	return "-unknown"
}
